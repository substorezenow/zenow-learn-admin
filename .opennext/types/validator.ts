// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/dashboard/blogs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/blogs">> = Specific
  const handler = {} as typeof import("../../app/dashboard/blogs/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/categories/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/categories">> = Specific
  const handler = {} as typeof import("../../app/dashboard/categories/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/courses/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/courses">> = Specific
  const handler = {} as typeof import("../../app/dashboard/courses/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/debug/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/debug">> = Specific
  const handler = {} as typeof import("../../app/dashboard/debug/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/fields/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/fields">> = Specific
  const handler = {} as typeof import("../../app/dashboard/fields/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/modules/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/modules">> = Specific
  const handler = {} as typeof import("../../app/dashboard/modules/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/profile">> = Specific
  const handler = {} as typeof import("../../app/dashboard/profile/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/security/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/security">> = Specific
  const handler = {} as typeof import("../../app/dashboard/security/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/settings">> = Specific
  const handler = {} as typeof import("../../app/dashboard/settings/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/students/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/students">> = Specific
  const handler = {} as typeof import("../../app/dashboard/students/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/forgot-password/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/forgot-password">> = Specific
  const handler = {} as typeof import("../../app/forgot-password/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../app/login/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/secure-login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/secure-login">> = Specific
  const handler = {} as typeof import("../../app/secure-login/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/test-secure/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-secure">> = Specific
  const handler = {} as typeof import("../../app/test-secure/page.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/categories/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/categories/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/admin/categories/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/categories/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/categories">> = Specific
  const handler = {} as typeof import("../../app/api/admin/categories/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/courses/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/courses/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/admin/courses/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/courses/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/courses">> = Specific
  const handler = {} as typeof import("../../app/api/admin/courses/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/fields/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/fields/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/admin/fields/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/fields/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/fields">> = Specific
  const handler = {} as typeof import("../../app/api/admin/fields/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/security-dashboard/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/security-dashboard">> = Specific
  const handler = {} as typeof import("../../app/api/admin/security-dashboard/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/admin/stats/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/stats">> = Specific
  const handler = {} as typeof import("../../app/api/admin/stats/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/clear-cookies/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/clear-cookies">> = Specific
  const handler = {} as typeof import("../../app/api/auth/clear-cookies/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/login">> = Specific
  const handler = {} as typeof import("../../app/api/auth/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/logout/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/logout">> = Specific
  const handler = {} as typeof import("../../app/api/auth/logout/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/secure-login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/secure-login">> = Specific
  const handler = {} as typeof import("../../app/api/auth/secure-login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/session-verify/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/session-verify">> = Specific
  const handler = {} as typeof import("../../app/api/auth/session-verify/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/validate-fingerprint/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/validate-fingerprint">> = Specific
  const handler = {} as typeof import("../../app/api/auth/validate-fingerprint/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/layout.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.jsx")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
